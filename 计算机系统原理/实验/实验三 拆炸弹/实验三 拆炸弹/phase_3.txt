gdb操作
b* 0x00400f34
r
i r $v0
b* 0x00400f4c
r
x $v0
b* 0x00400f70
r
x $v0
//输入第一个数为0
b* 0x00400f94
r
x $v0
x $v1
//如未引爆
b* 0x00401200
r
x $v0
x $v1

00400ed4 <phase_3>:
  400ed4:	27bdffc8 	addiu	sp,sp,-56
  400ed8:	afbf0034 	sw	ra,52(sp)
  400edc:	afbe0030 	sw	s8,48(sp)
  400ee0:	03a0f021 	move	s8,sp
  400ee4:	3c1c0042 	lui	gp,0x42
  400ee8:	279cb190 	addiu	gp,gp,-20080
  400eec:	afbc0018 	sw	gp,24(sp)
  400ef0:	afc40038 	sw	a0,56(s8)
  400ef4:	8fc40038 	lw	a0,56(s8)
  400ef8:	3c020040 	lui	v0,0x40
  400efc:	24452780 	addiu	a1,v0,10112
  400f00:	27c3002c 	addiu	v1,s8,44
  400f04:	27c20028 	addiu	v0,s8,40
  400f08:	27c60024 	addiu	a2,s8,36
  400f0c:	afa60010 	sw	a2,16(sp)
  400f10:	00603021 	move	a2,v1
  400f14:	00403821 	move	a3,v0
  400f18:	8f828084 	lw	v0,-32636(gp)
  400f1c:	00000000 	nop
  400f20:	0040c821 	move	t9,v0
  400f24:	0320f809 	jalr	t9
  400f28:	00000000 	nop
  400f2c:	8fdc0018 	lw	gp,24(s8)
  400f30:	28420003 	slti	v0,v0,3 // 判定输入的数据个数是否为3
  400f34:	10400004 	beqz	v0,400f48 <phase_3+0x74>
  400f38:	00000000 	nop
  400f3c:	0c10087c 	jal	4021f0 <explode_bomb>
  400f40:	00000000 	nop
  400f44:	8fdc0018 	lw	gp,24(s8)
  400f48:	8fc2002c 	lw	v0,44(s8) // 读入输入的第一个数至$v0
  400f4c:	00000000 	nop
  400f50:	2c430008 	sltiu	v1,v0,8 // 判断$v0是否小于8,是则继续,否则引爆，因为只有0到7共8个case语句
  400f54:	1060008e 	beqz	v1,401190 <phase_3+0x2bc>
  400f58:	00000000 	nop
  400f5c:	00021880 	sll	v1,v0,0x2 //$v1 = $v0 * 4，拓至1 int型变量长度
  400f60:	3c020040 	lui	v0,0x40
  400f64:	2442278c 	addiu	v0,v0,10124
  400f68:	00621021 	addu	v0,v1,v0
  400f6c:	8c420000 	lw	v0,0(v0) //$v0对应case语句的地址，用x $v0查看
  400f70:	00000000 	nop
  400f74:	00400008 	jr	v0 //switch语句，跳至相应的case语句
  400f78:	00000000 	nop //case 0:
  400f7c:	24020071 	li	v0,113 //q的ASCII码
  400f80:	a3c20020 	sb	v0,32(s8) //存入1byte的数据
  400f84:	8f82806c 	lw	v0,-32660(gp)
  400f88:	00000000 	nop
  400f8c:	8c43002c 	lw	v1,44(v0) //读入学号的最后一位
  400f90:	8fc20024 	lw	v0,36(s8) //读入输入数据的第三个数
  400f94:	00000000 	nop
  400f98:	00620018 	mult	v1,v0
  400f9c:	00001812 	mflo	v1 //$v1 = $v1 * $v0
  400fa0:	24020309 	li	v0,777 //判断是否为777(=3*259=7*111)，是则break，否则引爆
  400fa4:	10620081 	beq	v1,v0,4011ac <phase_3+0x2d8>
  400fa8:	00000000 	nop
  400fac:	0c10087c 	jal	4021f0 <explode_bomb>
  400fb0:	00000000 	nop
  400fb4:	8fdc0018 	lw	gp,24(s8)
  400fb8:	1000008f 	b	4011f8 <phase_3+0x324>
  400fbc:	00000000 	nop //case 1:
  400fc0:	24020062 	li	v0,98 //b的ASCII码
  400fc4:	a3c20020 	sb	v0,32(s8) //存入1byte的数据
  400fc8:	8f82806c 	lw	v0,-32660(gp)
  400fcc:	00000000 	nop
  400fd0:	8c43002c 	lw	v1,44(v0) //读入学号的最后一位
  400fd4:	8fc20024 	lw	v0,36(s8) //读入输入数据的第三个数
  400fd8:	00000000 	nop
  400fdc:	00620018 	mult	v1,v0
  400fe0:	00001812 	mflo	v1 //$v1 = $v1 * $v0
  400fe4:	240200d6 	li	v0,214 //判断是否为214(=2*107)，是则break，否则引爆
  400fe8:	10620073 	beq	v1,v0,4011b8 <phase_3+0x2e4>
  400fec:	00000000 	nop
  400ff0:	0c10087c 	jal	4021f0 <explode_bomb>
  400ff4:	00000000 	nop
  400ff8:	8fdc0018 	lw	gp,24(s8)
  400ffc:	1000007e 	b	4011f8 <phase_3+0x324>
  401000:	00000000 	nop //case 2
  401004:	24020062 	li	v0,98 //b的ASCII码
  401008:	a3c20020 	sb	v0,32(s8) //存入1byte的数据
  40100c:	8f82806c 	lw	v0,-32660(gp)
  401010:	00000000 	nop
  401014:	8c43002c 	lw	v1,44(v0) //读入学号的最后一位
  401018:	8fc20024 	lw	v0,36(s8) //读入输入数据的第三个数
  40101c:	00000000 	nop
  401020:	00620018 	mult	v1,v0
  401024:	00001812 	mflo	v1 //$v1 = $v1 * $v0
  401028:	240202f3 	li	v0,755 //判断是否为755(=5*151)，是则break，否则引爆
  40102c:	10620065 	beq	v1,v0,4011c4 <phase_3+0x2f0>
  401030:	00000000 	nop
  401034:	0c10087c 	jal	4021f0 <explode_bomb>
  401038:	00000000 	nop
  40103c:	8fdc0018 	lw	gp,24(s8)
  401040:	1000006d 	b	4011f8 <phase_3+0x324>
  401044:	00000000 	nop //case 3:
  401048:	2402006b 	li	v0,107 //k的ASCII码
  40104c:	a3c20020 	sb	v0,32(s8) //存入1byte的数据
  401050:	8f82806c 	lw	v0,-32660(gp)
  401054:	00000000 	nop
  401058:	8c43002c 	lw	v1,44(v0) //读入学号的最后一位
  40105c:	8fc20024 	lw	v0,36(s8) //读入输入数据的第三个数
  401060:	00000000 	nop
  401064:	00620018 	mult	v1,v0
  401068:	00001012 	mflo	v0 //$v0 = $v1 * $v0
  40106c:	10400058 	beqz	v0,4011d0 <phase_3+0x2fc> //判断$v0是否等于0，是则break，否则引爆
  401070:	00000000 	nop
  401074:	0c10087c 	jal	4021f0 <explode_bomb>
  401078:	00000000 	nop
  40107c:	8fdc0018 	lw	gp,24(s8)
  401080:	1000005d 	b	4011f8 <phase_3+0x324>
  401084:	00000000 	nop //case 4:
  401088:	2402006f 	li	v0,111 //o的ASCII码
  40108c:	a3c20020 	sb	v0,32(s8) //存入1byte的数据
  401090:	8f82806c 	lw	v0,-32660(gp)
  401094:	00000000 	nop
  401098:	8c43002c 	lw	v1,44(v0) //读入学号的最后一位
  40109c:	8fc20024 	lw	v0,36(s8) //读入输入数据的第三个数
  4010a0:	00000000 	nop
  4010a4:	00620018 	mult	v1,v0
  4010a8:	00001812 	mflo	v1 //$v1 = $v1 * $v0
  4010ac:	240200e4 	li	v0,228 //判断是否为228(=2*114=4*57)，是则break，否则引爆
  4010b0:	1062004a 	beq	v1,v0,4011dc <phase_3+0x308>
  4010b4:	00000000 	nop
  4010b8:	0c10087c 	jal	4021f0 <explode_bomb>
  4010bc:	00000000 	nop
  4010c0:	8fdc0018 	lw	gp,24(s8)
  4010c4:	1000004c 	b	4011f8 <phase_3+0x324>
  4010c8:	00000000 	nop //case 5:
  4010cc:	24020074 	li	v0,116 //t的ASCII码
  4010d0:	a3c20020 	sb	v0,32(s8) //存入1byte的数据
  4010d4:	8f82806c 	lw	v0,-32660(gp)
  4010d8:	00000000 	nop
  4010dc:	8c43002c 	lw	v1,44(v0) //读入学号的最后一位
  4010e0:	8fc20024 	lw	v0,36(s8) //读入输入数据的第三个数
  4010e4:	00000000 	nop
  4010e8:	00620018 	mult	v1,v0
  4010ec:	00001812 	mflo	v1 //$v1 = $v1 * $v0
  4010f0:	24020201 	li	v0,513 //判断是否为513(=3*171=9*57)，是则break，否则引爆
  4010f4:	1062003c 	beq	v1,v0,4011e8 <phase_3+0x314>
  4010f8:	00000000 	nop
  4010fc:	0c10087c 	jal	4021f0 <explode_bomb>
  401100:	00000000 	nop
  401104:	8fdc0018 	lw	gp,24(s8)
  401108:	1000003b 	b	4011f8 <phase_3+0x324>
  40110c:	00000000 	nop //case 6:
  401110:	24020076 	li	v0,118 //v的ASCII码
  401114:	a3c20020 	sb	v0,32(s8) //存入1byte的数据
  401118:	8f82806c 	lw	v0,-32660(gp)
  40111c:	00000000 	nop
  401120:	8c43002c 	lw	v1,44(v0) //读入学号的最后一位
  401124:	8fc20024 	lw	v0,36(s8) //读入输入数据的第三个数
  401128:	00000000 	nop
  40112c:	00620018 	mult	v1,v0
  401130:	00001812 	mflo	v1 //$v1 = $v1 * $v0
  401134:	2402030c 	li	v0,780 //判断是否为780(=2*390=3*260=4*195=5*156=6*130)，是则break，否则引爆
  401138:	10620004 	beq	v1,v0,40114c <phase_3+0x278>
  40113c:	00000000 	nop
  401140:	0c10087c 	jal	4021f0 <explode_bomb>
  401144:	00000000 	nop //case 7:
  401148:	8fdc0018 	lw	gp,24(s8) ???
  40114c:	24020062 	li	v0,98 //b的ASCII码
  401150:	a3c20020 	sb	v0,32(s8) //存入1byte的数据
  401154:	8f82806c 	lw	v0,-32660(gp)
  401158:	00000000 	nop
  40115c:	8c43002c 	lw	v1,44(v0) //读入学号的最后一位
  401160:	8fc20024 	lw	v0,36(s8) //读入输入数据的第三个数
  401164:	00000000 	nop
  401168:	00620018 	mult	v1,v0
  40116c:	00001812 	mflo	v1 //$v1 = $v1 * $v0
  401170:	24020338 	li	v0,824 //判断是否为824(=2*412=4*206)，是则break，否则引爆
  401174:	1062001f 	beq	v1,v0,4011f4 <phase_3+0x320>
  401178:	00000000 	nop
  40117c:	0c10087c 	jal	4021f0 <explode_bomb>
  401180:	00000000 	nop
  401184:	8fdc0018 	lw	gp,24(s8)
  401188:	1000001b 	b	4011f8 <phase_3+0x324>
  40118c:	00000000 	nop
  401190:	24020078 	li	v0,120
  401194:	a3c20020 	sb	v0,32(s8)
  401198:	0c10087c 	jal	4021f0 <explode_bomb>
  40119c:	00000000 	nop
  4011a0:	8fdc0018 	lw	gp,24(s8)
  4011a4:	10000014 	b	4011f8 <phase_3+0x324>
  4011a8:	00000000 	nop
  4011ac:	00000000 	nop
  4011b0:	10000011 	b	4011f8 <phase_3+0x324>
  4011b4:	00000000 	nop
  4011b8:	00000000 	nop
  4011bc:	1000000e 	b	4011f8 <phase_3+0x324>
  4011c0:	00000000 	nop
  4011c4:	00000000 	nop
  4011c8:	1000000b 	b	4011f8 <phase_3+0x324>
  4011cc:	00000000 	nop
  4011d0:	00000000 	nop
  4011d4:	10000008 	b	4011f8 <phase_3+0x324>
  4011d8:	00000000 	nop
  4011dc:	00000000 	nop
  4011e0:	10000005 	b	4011f8 <phase_3+0x324>
  4011e4:	00000000 	nop
  4011e8:	00000000 	nop
  4011ec:	10000002 	b	4011f8 <phase_3+0x324>
  4011f0:	00000000 	nop
  4011f4:	00000000 	nop
  4011f8:	83c20028 	lb	v0,40(s8) //读入输入的第二个字符数据放到$v0
  4011fc:	83c30020 	lb	v1,32(s8) //将case语句中存的字符取出放到$v1
  401200:	00000000 	nop
  401204:	10620004 	beq	v1,v0,401218 <phase_3+0x344> //比较v0/v1，不相等则引爆
  401208:	00000000 	nop
  40120c:	0c10087c 	jal	4021f0 <explode_bomb>
  401210:	00000000 	nop
  401214:	8fdc0018 	lw	gp,24(s8)
  401218:	03c0e821 	move	sp,s8
  40121c:	8fbf0034 	lw	ra,52(sp)
  401220:	8fbe0030 	lw	s8,48(sp)
  401224:	27bd0038 	addiu	sp,sp,56
  401228:	03e00008 	jr	ra
  40122c:	00000000 	nop

keyNotes:switch条件语句，0-7共8个case，用户需输入3个数，要求格式为整型、字符、整型，第一个是switch后面的那个变量的值，除case 3外，其他数均是要求输入ID的最后一位与输入的第三个数相乘的结果为指定的立即数，而case 3要求相乘结果为0。在每个case结构的开头都将一个字符存入栈中，在switch…case…结束后与我们输入的字符比较，令两个字符相等即可。
3 k *