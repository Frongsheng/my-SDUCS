gdb操作
b* 0x00400e00(*)
r(*)
x /d $v1(*)
b* 0x00400e5c
b* 0x00400e80
//以下循环五次
r
x /d $a0 		// 分别查看$a0（第i个数与学号的倒数i位相乘的结果）与$v0(第i + 1个数)
x /d $v0
r
x /d $v0

00400dbc <phase_2>:
  400dbc:	27bdffc0 	addiu	sp,sp,-64
  400dc0:	afbf003c 	sw	ra,60(sp)
  400dc4:	afbe0038 	sw	s8,56(sp)
  400dc8:	03a0f021 	move	s8,sp
  400dcc:	3c1c0042 	lui	gp,0x42
  400dd0:	279cb190 	addiu	gp,gp,-20080
  400dd4:	afbc0010 	sw	gp,16(sp)
  400dd8:	afc40040 	sw	a0,64(s8)
  400ddc:	27c2001c 	addiu	v0,s8,28
  400de0:	8fc40040 	lw	a0,64(s8)
  400de4:	00402821 	move	a1,v0
  400de8:	0c1006ea 	jal	401ba8 <read_six_numbers> // 读入用户输入的6个数字（整型）
  400dec:	00000000 	nop
  400df0:	8fdc0010 	lw	gp,16(s8)
  400df4:	8fc3001c 	lw	v1,28(s8) // m[$s8+28]存有读入的第一个数，将其存入$v1
  400df8:	24020001 	li	v0,1
  400dfc:	10620004 	beq	v1,v0,400e10 <phase_2+0x54> // 判定$v1是否为1，不是则引爆
  400e00:	00000000 	nop
  400e04:	0c10087c 	jal	4021f0 <explode_bomb>
  400e08:	00000000 	nop
  400e0c:	8fdc0010 	lw	gp,16(s8)
  400e10:	24020001 	li	v0,1  	// 设定循环的单次表达式$v0 = 1(i = 1)
  400e14:	afc20018 	sw	v0,24(s8) // 将$v0(i)存入栈
  400e18:	10000023 	b	400ea8 <phase_2+0xec> // 循环开始，跳至条件表达式
  400e1c:	00000000 	nop
  400e20:	8fc20018 	lw	v0,24(s8) // 将之前存在栈中的变量i取出
  400e24:	00000000 	nop
  400e28:	2442ffff 	addiu	v0,v0,-1 //$v0自减
  400e2c:	00021080 	sll	v0,v0,0x2 // $v0 = $v0 * 4（拓展到1 int即4 byte长度）
  400e30:	27c30018 	addiu	v1,s8,24 // 第i个数的存放位置为m[$s8 + 24 + i * 4]（一个int型变量占4个字节）
  400e34:	00621021 	addu	v0,v1,v0
  400e38:	8c440004 	lw	a0,4(v0) // 将第i个数的值存入$a0
  400e3c:	2403000c 	li	v1,12
  400e40:	8fc20018 	lw	v0,24(s8) // 将之前存在栈中的变量i取出
  400e44:	00000000 	nop
  400e48:	00621023 	subu	v0,v1,v0 //$v0 = $v1(12) - $v0(i)
  400e4c:	8f83806c 	lw	v1,-32660(gp) // 读得输入的学号
  400e50:	00021080 	sll	v0,v0,0x2 // $v0 = $v0 * 4（拓展到1 int即4 byte长度）
  400e54:	00621021 	addu	v0,v1,v0 // $v0 = $v1 + $v0
  400e58:	8c420000 	lw	v0,0(v0) // 将学号的倒数i位读入$v0中
  400e5c:	00000000 	nop
  400e60:	00820018 	mult	a0,v0 // $a0与$v0相乘
  400e64:	00002012 	mflo	a0 // 将结果存入$a0
  400e68:	8fc20018 	lw	v0,24(s8) // 将之前存在栈中的变量i取出
  400e6c:	00000000 	nop
  400e70:	00021080 	sll	v0,v0,0x2 // $v0 = $v0 * 4（拓展到1 int即4 byte长度）
  400e74:	27c30018 	addiu	v1,s8,24 // 第i个数的存放位置为m[$s8 + 24 + i * 4]（一个int型变量占4个字节）
  400e78:	00621021 	addu	v0,v1,v0 // 得到第i个数的位置
  400e7c:	8c420004 	lw	v0,4(v0) // 将第i + 1个数的值存入$v0
  400e80:	00000000 	nop
  400e84:	10820004 	beq	a0,v0,400e98 <phase_2+0xdc> // 比较$a0（第i个数与学号的倒数i位相乘的结果）与$v0(第i + 1个数)，若不相等则引爆
  400e88:	00000000 	nop
  400e8c:	0c10087c 	jal	4021f0 <explode_bomb>
  400e90:	00000000 	nop
  400e94:	8fdc0010 	lw	gp,16(s8) // 循环体末尾
  400e98:	8fc20018 	lw	v0,24(s8)
  400e9c:	00000000 	nop
  400ea0:	24420001 	addiu	v0,v0,1 // i自加
  400ea4:	afc20018 	sw	v0,24(s8) // 将i存入栈中
  400ea8:	8fc20018 	lw	v0,24(s8)
  400eac:	00000000 	nop
  400eb0:	28420006 	slti	v0,v0,6 // 判断循环是否结束，相当于i != 6(i < 6)
  400eb4:	1440ffda 	bnez	v0,400e20 <phase_2+0x64>
  400eb8:	00000000 	nop
  400ebc:	03c0e821 	move	sp,s8
  400ec0:	8fbf003c 	lw	ra,60(sp)
  400ec4:	8fbe0038 	lw	s8,56(sp)
  400ec8:	27bd0040 	addiu	sp,sp,64
  400ecc:	03e00008 	jr	ra
  400ed0:	00000000 	nop

keyNotes:将用户输入的六个数中，第一个数必须为1，第i个数分别与学号倒数i位相乘，结果与用户输入的第i+1个数比较判断是否相等，应使其相等
201900302030:1 0 0 0 0 0